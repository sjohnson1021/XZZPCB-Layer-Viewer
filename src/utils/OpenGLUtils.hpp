#pragma once

#include <iostream> // Or your preferred logging header like <SDL3/SDL_log.h>

// It's important to include the correct OpenGL header that your project uses.
// This could be <GL/gl.h>, <glad/glad.h>, <GL/glew.h>, or similar.
// For ImGui's SDL_Renderer backend, typically SDL itself manages GL loading,
// but glGetError is a standard GL function.
// Assuming <GL/gl.h> for now. If you use glad/glew, adjust accordingly.
#if defined(IMGUI_IMPL_OPENGL_ES2)
#include <GLES2/gl2.h>
#elif defined(IMGUI_IMPL_OPENGL_ES3)
#include <GLES3/gl3.h>
#else
// Fallback for desktop GL
#include <GL/gl.h> 
#endif

// Function to convert GLenum error codes to strings (basic version)
// For a more complete version, you might use gluErrorString if available and linked.
inline const char* GLenumToString(GLenum err) {
    switch (err) {
        case GL_NO_ERROR:           return "GL_NO_ERROR";
        case GL_INVALID_ENUM:       return "GL_INVALID_ENUM";
        case GL_INVALID_VALUE:      return "GL_INVALID_VALUE";
        case GL_INVALID_OPERATION:  return "GL_INVALID_OPERATION";
        case GL_STACK_OVERFLOW:     return "GL_STACK_OVERFLOW"; // Deprecated in core GL, but good to have
        case GL_STACK_UNDERFLOW:    return "GL_STACK_UNDERFLOW"; // Deprecated
        case GL_OUT_OF_MEMORY:      return "GL_OUT_OF_MEMORY";
        case GL_INVALID_FRAMEBUFFER_OPERATION: return "GL_INVALID_FRAMEBUFFER_OPERATION";
        default:                    return "Unknown GL Error";
    }
}

inline void CheckOpenGLError(const char* stmt, const char* fname, int line) {
    GLenum err;
    while ((err = glGetError()) != GL_NO_ERROR) {
        // Using SDL_Log Error for consistency if you use SDL logging elsewhere
        // SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "OpenGL error %s (0x%04X) at %s (%s:%d)", 
        //              GLenumToString(err), err, stmt, fname, line);
        
        // Or using std::cerr
        std::cerr << "OpenGL error: " << GLenumToString(err) << " (0x" << std::hex << err << std::dec << ") generated by call:" << std::endl
                  << "  " << stmt << std::endl
                  << "  at " << fname << ":" << line << std::endl;
    }
}

// Define a macro for convenience. This will execute the statement and then check for errors.
#define GL_CHECK(stmt) do { \
    stmt; \
    CheckOpenGLError(#stmt, __FILE__, __LINE__); \
} while (0)

// Macro to just check errors without executing a statement (e.g., at end of a block)
#define GL_CHECK_ERRORS() CheckOpenGLError("OpenGL State Check", __FILE__, __LINE__) 